{"version":3,"sources":["hx/hooks.cljs"],"mappings":"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","names":["var_args","G__29172","hx.hooks/useState","js/Error","initial","vec__29173","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","v","u","js/module$node_modules$react$index.useState","updater","G__29176","G__29177","js/module$node_modules$react$index.useCallback","x","f","xs","hx$hooks$updater.cljs$core$IFn$_invoke$arity$1","cljs.core.apply.cljs$core$IFn$_invoke$arity$3","eq?","vec__29178","G__29181","G__29182","cljs.core/ifn?","G__29183","current-state","new-state","hx.hooks/useIRef","sentinel","G__29184","js/module$node_modules$react$index.useRef","G__29185","G__29186","js/module$node_modules$react$index.useMemo","x29187","cljs.core/PROTOCOL_SENTINEL","this","goog.object/set","G__29188","G__29189","G__29190","G__29191","a","G__29192","G__29193","G__29194","G__29195","G__29196","b","G__29197","G__29198","G__29199","G__29200","G__29201","G__29202","G__29203","G__29204","G__29205","cljs.core.apply.cljs$core$IFn$_invoke$arity$5","G__29207","hx.hooks/useReducer","reducer","init-state","hx.hooks.useReducer.cljs$core$IFn$_invoke$arity$3","js/undefined","init","G__29208","G__29209","G__29210","js/module$node_modules$react$index.useReducer","G__29211","G__29212","cljs.core/fn?","state","action","hx.hooks/useValue","-x","x'","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","G__29213","G__29214","js/module$node_modules$react$index.useEffect","hx.hooks/wrap-fx","G__29216","hx.hooks/useEffect","G__29217","deps","G__29218","G__29219","cljs.core/to-array","hx.hooks/useContext","js/module$node_modules$react$index.useContext","hx.hooks/useMemo","G__29221","hx.hooks/useCallback","G__29222","G__29223","G__29225","hx.hooks/useImperativeHandle","ref","create-handle","js/module$node_modules$react$index.useImperativeHandle","G__29226","G__29227","G__29228","G__29230","hx.hooks/useLayoutEffect","js/module$node_modules$react$index.useLayoutEffect","G__29231","G__29232","hx.hooks/useDebugValue","js/module$node_modules$react$index.useDebugValue","hx.hooks/<-state","hx.hooks/<-ref","hx.hooks/<-deref","vec__29233","G__29236","cljs.core/deref","G__29237","G__29238","k","cljs.core.gensym.cljs$core$IFn$_invoke$arity$1","cljs.core/add-watch","_","v'","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","G__29239","cljs.core/remove-watch","hx.hooks/<-effect","hx.hooks/<-reducer","hx.hooks/<-value","hx.hooks/<-context","hx.hooks/<-memo","hx.hooks/<-callback","hx.hooks/<-imperative-handle","hx.hooks/<-debug-value","hx.hooks/<-layout-effect"],"sourcesContent":["(ns hx.hooks\n  (:require [\"react\" :as react]\n            [goog.object :as gobj]))\n\n(defn useState\n  \"Like `React.useState`, but the update function returned can be used similar\n  to `swap!`.\n\n  Example:\n  ```\n  (let [[state set-state] (useState {:count 0})]\n   ;; ...\n   (set-state update :count inc))\n  ```\n\n  If `eq?` is passed in, will use that function to determine whether to update\n  the React state. If it returns `true`, it will keep the old state, `false` it\n  will render with new state.\"\n  ([initial]\n   (let [[v u] (react/useState initial)\n         updater (react/useCallback (fn updater\n                                      ([x] (u x))\n                                      ([f & xs]\n                                       (updater (fn spread-updater [x]\n                                                  (apply f x xs)))))\n                                    #js [u])]\n     [v updater]))\n  ([initial eq?]\n   (let [[v u] (react/useState initial)\n         updater (react/useCallback (fn updater\n                             ([x]\n                              ;; if x is not a fn, then it's likely not derived from previous state\n                              ;; so we don't bother checking equality\n                              (if-not (ifn? x)\n                                (u x)\n\n                                ;; When it is a function, new state will probably be derived from\n                                ;; previous. We can take advantage of structural sharing to do fast\n                                ;; equality here and avoid unnecessary re-renders\n                                (u (fn update [current-state]\n                                     (let [new-state (x current-state)]\n                                       (if (eq? current-state new-state)\n                                         ;; if equal, return the old one to preserve ref equality\n                                         ;; for React\n                                         current-state\n                                         new-state))))))\n                             ;; Support `(updater f a b c)`\n                             ([f & xs]\n                              (updater (fn spread-updater [x]\n                                         (apply f x xs)))))\n                           #js [u])]\n     [v updater])))\n\n(defn useIRef\n  \"Takes an initial value. Returns an atom that will _NOT_ re-render component\n  on change.\"\n  [initial]\n  (let [sentinel (react/useRef #js {})]\n    (react/useMemo\n     (fn []\n       (specify! #js {:current initial}\n         IDeref\n         (-deref [this]\n           (.-current ^js this))\n\n         IReset\n         (-reset! [this v]\n           (gobj/set this \"current\" v))\n\n         ISwap\n         (-swap!\n           ([this f]\n            (gobj/set this \"current\" (f (.-current ^js this))))\n           ([this f a]\n            (gobj/set this \"current\" (f (.-current ^js this) a)))\n           ([this f a b]\n            (gobj/set this \"current\" (f (.-current ^js this) a b)))\n           ([this f a b xs]\n            (gobj/set this \"current\" (apply f (.-current ^js this) a b xs))))))\n     #js [sentinel])))\n\n\n(defn useReducer \"Just react/useReducer.\"\n  ([reducer init-state]\n   (useReducer reducer init-state js/undefined))\n  ([reducer init-state init]\n   (react/useReducer\n    ;; handle ifn, e.g. multi-methods\n    (react/useMemo\n     #(if (and (not (fn? reducer)) (ifn? reducer))\n        (fn wrap-ifn [state action]\n          (reducer state action))\n        reducer)\n     #js [reducer])\n    init-state\n    init)))\n\n;; React uses JS equality to check of the current deps are different than\n;; previous deps values. This means that Clojure data (e.g. maps, sets, vecs)\n;; equality is not respected and will trigger if you e.g. pass in a vec of\n;; strings as props and need to depend on that inside of an effect.\n;;\n;; We can work around this by assigning the previous deps to a ref, and do\n;; our own equality check to see if they have changed. If so, we update the\n;; ref to equal the current value.\n;;\n;; We can then just pass this one value into e.g. `useEffect` and it will only\n;; change if Clojure's equality detects a difference.\n(defn useValue\n  \"Caches `x`. When a new `x` is passed in, returns new `x` only if it is\n  not structurally equal to the previous `x`.\n\n  Useful for optimizing `<-effect` et. al. when you have two values that might\n  be structurally equal by referentially different.\"\n  [x]\n  (let [-x (react/useRef x)]\n    ;; if they are equal, return the prev one to ensure ref equality\n    (let [x' (if (= x (.-current -x))\n               (.-current -x)\n               x)]\n      ;; Set the ref to be the last value that was succesfully used to render\n      (react/useEffect (fn []\n                         (set! (.-current -x) x)\n                         js/undefined)\n                       #js [x'])\n      x')))\n\n;; React `useEffect` expects either a function or undefined to be returned\n(defn- wrap-fx [f]\n  (fn wrap-fx-return []\n    (let [x (f)]\n      (if (fn? x)\n        x\n        js/undefined))))\n\n(defn useEffect\n  \"Just react/useEffect\"\n  ([f]\n   (react/useEffect (wrap-fx f)))\n  ([f deps]\n   (react/useEffect (wrap-fx f) (to-array deps))))\n\n(def useContext\n  \"Just react/useContext\"\n  react/useContext)\n\n(def useMemo\n  \"Just react/useMemo\"\n  react/useMemo)\n\n(defn useCallback\n  \"Just react/useCallback\"\n  ([f] (react/useCallback f))\n  ([f deps] (react/useCallback f (to-array deps))))\n\n(defn useImperativeHandle\n  \"Just react/useImperativeHandle\"\n  ([ref create-handle]\n   (react/useImperativeHandle ref create-handle))\n  ([ref create-handle deps]\n   (react/useImperativeHandle ref create-handle\n                              (to-array deps))))\n\n(defn useLayoutEffect\n  \"Just react/useLayoutEffect\"\n  ([f] (react/useLayoutEffect f))\n  ([f deps] (react/useLayoutEffect f (to-array deps))))\n\n\n(def useDebugValue\n  \"Just react/useDebugValue\"\n  react/useDebugValue)\n\n\n;;\n;; Deprecated\n;;\n\n(def ^{:deprecated \"Use useState\"} <-state useState)\n\n(def ^{:deprecated \"Use useIRef\"} <-ref useIRef)\n\n(defn ^{:deprecated \"Use useState\"} <-deref\n  \"Takes an atom. Returns the currently derefed value of the atom, and re-renders\n  the component on change.\"\n  ;; if no deps are passed in, we assume we only want to run\n  ;; subscrib/unsubscribe on mount/unmount\n  ([a]\n   ;; create a react/useState hook to track and trigger renders\n   (let [[v u] (react/useState @a)]\n     ;; react/useEffect hook to create and track the subscription to the iref\n     (react/useEffect\n      (fn []\n        (let [k (gensym \"<-deref\")]\n          (add-watch a k\n                     ;; update the react state on each change\n                     (fn [_ _ _ v'] (u v')))\n          ;; Check to ensure that a change has not occurred to the atom between\n          ;; the component rendering and running this effect.\n          ;; If it has updated, then update the state to the current value.\n          (when (not= @a v)\n            (u @a))\n          ;; return a function to tell react hook how to unsubscribe\n          #(remove-watch a k)))\n      ;; pass in deps vector as an array\n      ;; resubscribe if `a` changes\n      #js [a])\n     ;; return value of useState on each run\n     v)))\n\n(def ^{:deprecated \"Use useEffect\"} <-effect useEffect)\n\n(def ^{:deprecated \"Use useReducer\"} <-reducer\n  \"Just react/useReducer.\"\n  useReducer)\n\n(def ^{:deprecated \"Use useValue\"} <-value useValue)\n\n(def ^{:deprecated \"Use useContext\"} <-context\n  \"Just react/useContext\"\n  react/useContext)\n\n(def ^{:deprecated \"Use useMemo\"} <-memo\n  \"Just react/useMemo\"\n  react/useMemo)\n\n(def ^{:deprecated \"Use useCallback\"} <-callback useCallback)\n\n(def ^{:deprecated \"Use useImperativeHandle\"} <-imperative-handle useImperativeHandle)\n\n(def ^{:deprecated \"Use useDebugValue\"} <-debug-value\n  \"Just react/useDebugValue\"\n  react/useDebugValue)\n\n(def ^{:deprecated \"Use useLayoutEffect\"} <-layout-effect useLayoutEffect)\n"]}